package com.example.demo;

import com.example.demo.service.MyService;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;


// Generated by https://start.springboot.io
// 优质的 spring/boot/data/security/cloud 框架中文文档尽在 => https://springdoc.cn
@SpringBootApplication
@MapperScan("com.example.demo.mapper")
@EnableAsync// 这个注解不使用的话则@Async 注解无效,变成同步执行
@EnableScheduling
public class MainApplication implements CommandLineRunner {

    private final ApplicationContext context;

    // 下次抄代码发现
    public MainApplication(ApplicationContext context) {
        this.context = context;
    }


    public static void main(String[] args) {
        SpringApplication.run(MainApplication.class, args);
        System.out.println("Hello World!");

//        InvocationHandler handler = new InvocationHandler() {
//            @Override
//            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
//                System.out.println(method);
//                if (method.getName().equals("morning")) {
//                    System.out.println("Good morning, " + args[0]);
//                }
//                return null;
//            }
//        };
//        Hello hello = (Hello) Proxy.newProxyInstance(
//                Hello.class.getClassLoader(), // 传入ClassLoader
//                new Class[] { Hello.class }, // 传入要实现的接口
//                handler); // 传入处理调用方法的InvocationHandler
//        hello.morning("Bob");

    }

    @Override
    public void run(String... args) throws Exception {
        MyService myService = context.getBean(MyService.class);

//        myService.doSomething();
//        myService.doSomething2();
//        myService.doSomething3(); // 每次调用都将获取一个新的 PrototypeBean 实例
    }

    interface Hello {
        void morning(String name);
    }
}

